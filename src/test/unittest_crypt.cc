/* Copyright 2011 Nick Mathewson, George Kadianakis
   See LICENSE for other credits and copying information
*/

#include "util.h"
#include "unittest.h"
#include "crypt.h"
#include "rng.h"

/* AES/GCM test vectors from
   http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmtestvectors.zip
*/

static void
test_crypt_aesgcm_enc(void *)
{
  struct testvec
  {
    const char *key;
    const char *iv;
    const char *tag;
    const char *pt;
    const char *ct;
    size_t len;
  };
  const struct testvec testvecs[] = {
    { "\x10\x14\xf7\x43\x10\xd1\x71\x8d\x1c\xc8\xf6\x5f\x03\x3a\xaf\x83",
      "\x6b\xb5\x4c\x9f\xd8\x3c\x12\xf5\xba\x76\xcc\x83\xf7\x65\x0d\x2c",
      "\x0b\x6b\x57\xdb\x30\x9e\xff\x92\x0c\x81\x33\xb8\x69\x1e\x0c\xac",
      "", "", 0 },
    { "\xd8\x74\xa2\x5f\x22\x69\xe3\x52\xcc\xdd\x83\xcc\x2d\x4e\x45\xb7",
      "\x97\x17\xab\xb9\xed\x11\x4f\x27\x60\xa0\x67\x27\x9c\x38\x21\xe3",
      "\x0e\x09\xe5\x3e\x5f\xe8\xd8\x18\xc5\x39\x7c\x51\x17\x3e\xda\x97",
      "", "", 0 },
    { "\xce\x0f\x8c\xfe\x9d\x64\xc4\xf4\xc0\x45\xd1\x1b\x97\xc2\xd9\x18",
      "\xad\x4c\x36\x27\xa4\x94\xfc\x62\x83\x16\xdc\x03\xfa\xf8\x1d\xb8",
      "\x5f\x6a\x36\x20\xe5\x9f\xe8\x97\x72\x86\xf5\x02\xd0\xda\x75\x17",
      "\xdf\xff\x25\x0d\x38\x0f\x36\x38\x80\x96\x3b\x42\xd6\x91\x3c\x1b"
      "\xa1\x1e\x8e\xdf\x7c\x4a\xb8\xb7\x6d\x79\xcc\xba\xac\x62\x8f\x54"
      "\x8e\xe5\x42\xf4\x87\x28\xa9\xa2\x62\x0a\x0d\x69\x33\x9c\x82\x91"
      "\xe8\xd3\x98\x44\x0d\x74\x0e\x31\x09\x08\xcd\xee\x7c\x27\x3c\xc9"
      "\x12\x75\xce\x72\x71\xba\x12\xf6\x92\x37\x99\x8b\x07\xb7\x89\xb3"
      "\x99\x3a\xaa\xc8\xdc\x4e\xc1\x91\x44\x32\xa3\x0f\x51\x72\xf7\x9e"
      "\xa0\x53\x9b\xd1\xf7\x0b\x36\xd4\x37\xe5\x17\x0b\xc6\x30\x39\xa5"
      "\x28\x08\x16\xc0\x5e\x1e\x41\x76\x0b\x58\xe3\x56\x96\xce\xbd\x55",
      "\x0d\xe7\x3d\x97\x02\xd9\x35\x7c\x9e\x86\x19\xb7\x94\x4e\x40\x73"
      "\x2a\xc2\xf4\xdd\x3f\x1b\x42\xd8\xd7\xf3\x6a\xcb\x1f\x14\x97\x99"
      "\x0d\x0e\xc3\xd6\x26\x08\x2c\xdb\x13\x84\xec\x72\xa4\xc1\xd9\x89"
      "\x55\xba\x2a\x3a\xae\x6d\x81\xb2\x4e\x9c\xe5\x33\xeb\x5e\xde\x72"
      "\x10\xae\x4a\x06\xd4\x3f\x75\x01\x38\xb8\x91\x4d\x75\x4d\x43\xbc"
      "\xe4\x16\xfe\xe7\x99\xcc\x4d\xd0\x39\x49\xac\xed\xc3\x4d\xef\x7d"
      "\x6b\xde\x6b\xa4\x1a\x4c\xf0\x3d\x20\x96\x89\xa3\xad\x18\x1f\x1b"
      "\x6d\xcf\x76\xca\x25\xc8\x7e\xb1\xc7\x45\x9c\xc9\xf9\x5d\xdc\x57",
      128 },
    { "\x81\x37\x1a\xcd\x55\x53\xfd\xad\xc6\xaf\x96\xfd\xee\xe4\xc6\x4d",
      "\x32\x62\x50\x1e\xd2\x30\xbc\x4f\x5a\x19\x0a\xb0\x50\xe1\xbc\xee",
      "\x22\x7d\x42\x2f\x87\x97\xb5\x8a\xa6\xa1\x89\x65\x8b\x77\x0d\xa9",
      "\x94\x08\x06\xfd\x5d\xdc\xab\x99\x37\xb4\xba\x87\x5e\x46\xbb\x4b"
      "\x7e\x96\x88\xd6\x16\xd1\x7f\xd2\x46\x46\xf1\xef\x14\x57\x81\x9f"
      "\x55\x88\x7f\x53\xbd\x70\x03\x9b\xb8\x3b\x4d\x34\x6a\xab\xe8\x05"
      "\x28\x8a\xb7\xa5\x75\x68\x74\xbd\xc2\xb3\xd4\x89\x42\x17\xd3\xa0"
      "\x36\xda\x5e\x9e\x16\x2f\xa2\xd9\x81\x9c\xeb\x56\x1e\xcf\x81\x7e"
      "\xfc\x94\x93\xb9\xa6\x07\x96\xf6\xdc\x5e\x71\x7a\xc9\x9b\xc4\xba"
      "\x29\x8e\xee\x4f\x3c\xd5\x6b\xbc\x07\xdd\xe9\x70\xd4\xf0\x7b\xbf"
      "\xa1\xf5\xfe\x18\xc2\x9a\x39\x27\xab\xe1\x13\x69\x09\x1d\xf2\x8f",
      "\xff\xeb\x19\x07\xbd\xbf\xea\x87\x78\x90\xa6\xe9\x72\xa5\x33\xae"
      "\x66\x1a\x90\x3a\x25\x7b\x3b\x91\x2c\x7c\x76\x8c\xc9\x88\xe0\x5a"
      "\xfd\x71\xa9\xe6\x11\x7d\x90\xd1\xe1\xb5\x4f\x55\xde\x9b\x10\xcb"
      "\xce\x7a\x10\x94\x52\x56\x74\x83\xcc\x8d\x6a\x68\xb9\xe5\x6d\xa1"
      "\x08\x02\x63\x05\x91\xfd\xd8\xd5\x5f\x9e\x17\x2f\x0f\x58\xa7\xe0"
      "\xc5\x6a\x73\xa1\xae\x3c\x30\x62\xf0\x99\x7b\x36\x4e\xb0\x88\x5d"
      "\x48\xe0\x39\xb2\xba\x1b\xd1\x4d\xbb\x9c\x74\xa4\x1c\xbd\x4b\x52"
      "\x56\x4e\x47\x0d\x1a\x80\x38\xd1\x52\x07\xa7\x65\x0b\xd3\xf1\xd6",
      128 },
    { 0, 0, 0, 0, 0, 0 }
  };

  encryptor *c;
  uint8_t obuf[144];
  int i;

  for (i = 0; testvecs[i].key; i++) {
    c = encryptor::create((const uint8_t *)testvecs[i].key, 16);
    tt_int_op(c, !=, 0);
    c->encrypt(obuf,
               (const uint8_t *)testvecs[i].pt, testvecs[i].len,
               (const uint8_t *)testvecs[i].iv, 16);
    delete c;
    tt_mem_op(obuf + testvecs[i].len, ==, testvecs[i].tag, 16);
    tt_mem_op(obuf, ==, testvecs[i].ct, testvecs[i].len);
  }

  /* It would be nice to test encryption under multiple IVs with the same
     key, but the NIST test vectors do not include any duplicate keys. */
 end:;
}

static void
test_crypt_aesgcm_good_dec(void *)
{
  struct testvec
  {
    const char *key;
    const char *iv;
    const char *ct;
    const char *pt;
    size_t len;
  };
  const struct testvec testvecs[] = {
    { "\xd7\x85\xda\xfe\xa3\xe9\x66\x73\x1e\xf6\xfc\x62\x02\x26\x25\x84",
      "\xd9\x1a\x46\x20\x5e\xe9\x40\x58\xb3\xb8\x40\x39\x97\x59\x2d\xd2",
      "\x3b\x92\xa1\x7c\x1b\x9c\x35\x78\xa6\x8c\xff\xea\x5a\x5b\x62\x45",
      "", 0 },
    { "\xae\xc9\x63\x83\x3b\x90\x98\xde\x1a\xba\xbc\x85\x3a\xb7\x4d\x96",
      "\x4e\x0f\xfd\x93\xbe\xff\xd7\x32\xc6\xf7\xd6\xad\x60\x6a\x2d\x24",
      "\xe9\xfc\xed\xc1\x76\xdf\xe5\x87\xdc\x61\xb2\x01\x10\x10\xcd\xf1",
      "", 0 },
    { "\x0d\xd3\x58\xbc\x3f\x99\x2f\x26\xe8\x1e\x3a\x2f\x3a\xa2\xd5\x17",
      "\xd8\xc7\x50\xbb\x44\x3e\xe1\xa1\x69\xdf\xe9\x7c\xfe\x4d\x85\x5b",
      "\x87\xcc\x4f\xd7\x57\x88\xc9\xd5\xcc\x83\xba\xe5\xd7\x64\xdd\x24"
      "\x9d\x17\x8a\xb2\x32\x24\x04\x97\x95\xd4\x28\x8b\x5e\xd9\xea\x3f"
      "\x31\x70\x68\xa3\x9a\x75\x74\xb3\x00\xc8\x54\x42\x26\xe8\x7b\x08"
      "\xe0\x08\xfb\xe2\x41\xd0\x94\x54\x5c\x21\x1d\x56\xac\x44\x43\x7d"
      "\x41\x49\x1a\x43\x82\x72\x73\x89\x68\xc8\xd3\x71\xaa\x77\x87\xb5"
      "\xf6\x06\xc8\x54\x9a\x9d\x86\x8d\x8a\x71\x38\x0e\x96\x57\xd3\xc0"
      "\x33\x79\x79\xfe\xb0\x1d\xe5\x99\x1f\xc1\x47\x0d\xfc\x59\xeb\x02"
      "\x51\x1e\xfb\xbf\xf3\xfc\xb4\x79\xa8\x62\xba\x38\x44\xa2\x5a\xaa"
      "\xa8\x1d\x13\x97\x3b\xaa\x22\xa7\x51\x83\x3d\x7d\x3f\x94\xb3\xb1",
      "\x77\x94\x9b\x29\xf0\x85\xbb\x3a\xbb\x71\xa5\x38\x60\x03\x81\x12"
      "\x33\x05\x6d\x32\x96\xeb\x09\x33\x70\xf7\x77\x7d\xad\xd3\x06\xd9"
      "\x3d\x59\xdc\xb9\x75\x4d\x38\x57\xcf\x27\x58\x09\x1b\xa6\x61\xf8"
      "\x45\xef\x05\x82\xf6\xae\x0e\x13\x43\x28\x10\x6f\x0d\x5d\x16\xb5"
      "\x41\xcd\x74\xfd\xc7\x56\xdc\x7b\x53\xf4\xf8\xa1\x94\xda\xee\xa9"
      "\x36\x9e\xbb\x16\x30\xc0\x1c\xcb\x30\x7b\x84\x8e\x95\x27\xda\x20"
      "\xa3\x98\x98\xd7\x48\xfd\x59\x20\x6f\x0b\x79\xd0\xed\x94\x6a\x89"
      "\x58\x03\x3a\x45\xbd\x9a\xe6\x73\x51\x8b\x32\x60\x67\x48\xeb\x65",
      128 },
    { "\xa8\x9e\x01\x94\x12\x68\x79\x36\x7b\x74\x93\x36\x62\xc1\x08\x4b",
      "\x82\x9d\xba\xe4\xc5\xe0\x7a\x6d\xe0\x78\x77\xbd\x1d\xde\x44\xfc",
      "\x52\xba\x2c\x37\x45\x8f\x56\x5a\x35\xc1\xe3\x3c\x17\x6e\xe1\xd5"
      "\x33\xc1\xa2\x81\xf4\xce\xc6\x98\xf3\xa5\x74\x19\x8c\xa2\xbc\x52"
      "\xdb\x1b\x6f\xa4\xfd\xd2\x78\xe8\x74\x81\x60\xa5\xba\xcc\x2d\x02"
      "\xb6\x7f\xc6\xb2\x80\x6a\xf7\x7e\x16\x2a\xa1\xa2\xd0\x96\x37\x81"
      "\xe7\x6c\x7d\x06\xbe\x5d\x85\x62\xc7\x84\x8f\x82\x6b\x2f\x76\x1a"
      "\x2d\x52\xa9\xb0\xba\x17\xcb\x6e\x5a\x94\x95\x52\x69\x4a\x23\x06"
      "\xe5\x2d\xbf\xbf\xf2\x7d\x11\xd9\x3c\x1c\x14\x99\x59\xbf\x73\x83"
      "\xeb\xfd\x23\xcd\x72\x92\xba\xb7\xe9\xfa\xe4\x02\xee\xa7\x89\x34"
      "\x67\x86\x0f\xcc\xf5\x35\xd2\x4c\xca\xf2\x76\x2b\x95\xba\x4b\x1d",
      "\xb6\x34\x24\x6f\xa6\x94\x74\xda\xce\xc4\x5a\x99\xd4\xf6\x56\xa4"
      "\x42\x56\xf4\x11\x5b\x29\x6c\x20\x14\x9d\xfd\x80\xe2\x26\x5f\xd6"
      "\x02\xe9\xf1\xe6\x0b\x47\xf7\xfc\xf4\x26\x52\x8e\xbf\x6e\xf9\xab"
      "\xe0\xed\x00\x00\xae\x33\x13\x59\x52\x6b\x45\x46\xf2\x2b\x1a\x78"
      "\x2a\x1d\xa2\x16\x2b\x9f\x04\xce\x2d\xa5\x92\x13\x31\x99\x86\x16"
      "\xd1\x99\x53\x5f\x89\xe9\xad\x3f\x8b\x40\x89\x07\xbf\xeb\xe6\x0e"
      "\x99\xfc\x17\xec\x4c\xab\x86\x00\xbb\xae\x93\xec\x32\x37\xcc\x20"
      "\xd6\xe3\xcf\x0b\xed\x59\x19\x11\xb4\x08\x22\x3e\xa8\xd9\x0d\x27",
      128 },
    { 0, 0, 0, 0, 0 }
  };

  decryptor *c;
  uint8_t obuf[128];
  int i, rv;

  for (i = 0; testvecs[i].key; i++) {
    c = decryptor::create((const uint8_t *)testvecs[i].key, 16);
    tt_int_op(c, !=, 0);

    rv = c->decrypt(obuf,
                    (const uint8_t *)testvecs[i].ct, testvecs[i].len + 16,
                    (const uint8_t *)testvecs[i].iv, 16);
    tt_int_op(rv, ==, 0);
    tt_mem_op(obuf, ==, testvecs[i].pt, testvecs[i].len);

    c->decrypt_unchecked(obuf,
                         (const uint8_t *)testvecs[i].ct, testvecs[i].len,
                         (const uint8_t *)testvecs[i].iv, 16);
    tt_mem_op(obuf, ==, testvecs[i].pt, testvecs[i].len);

    delete c;
  }
  c = 0;

 end:
  if (c) delete c;
}

static void
test_crypt_aesgcm_bad_dec(void *)
{
  struct testvec
  {
    const char *key;
    const char *iv;
    const char *ct;
    size_t len;
  };
  const struct testvec testvecs[] = {
    { "\xc4\xfb\x9e\x33\x93\x68\x1d\xa9\xce\xc5\xec\x96\xf8\x7c\x5c\x31",
      "\x84\x5e\x91\x0b\xc0\x55\xd8\x95\x87\x9f\x62\x10\x1d\x08\xb4\xc7",
      "\x99\xfb\x78\x3c\x49\x74\x16\xe4\xb6\xe2\xa5\xde\x7c\x78\x20\x57",
      0 },
    { "\x5c\xd9\xef\x87\x57\xcc\xaa\x66\x7e\x3e\xac\x22\xe1\x12\xc0\xa0",
      "\xa3\x5c\x3f\x11\x6d\xba\x7d\x43\x40\xe0\xd4\x12\xff\x40\x64\x73",
      "\xca\xd0\xb4\x60\x03\x74\x25\x17\xfd\x6d\x64\x14\xa4\x14\x15\x88",
      0 },
    { "\x43\xb5\xf1\x82\x27\xe5\xc7\x42\x88\xdb\xef\xf0\x38\x01\xac\xd6",
      "\x08\xee\x12\x24\x6c\xf7\xed\xb8\x1d\xa3\xd6\x10\xf3\xeb\xd1\x67",
      "\xf5\x8d\x63\x0f\x10\xcf\xca\x61\xd4\x64\x4d\x4f\x65\x05\xba\xb6"
      "\x29\xe8\xe8\xfa\xf1\x67\x3e\x64\x41\x7f\x9b\x79\xe6\x22\x96\x6a"
      "\x70\x11\xcf\xb3\xff\x74\xdb\x5c\xeb\xf0\x9a\xd3\xf4\x16\x43\xd4"
      "\x43\x7d\x21\x32\x04\xa6\xc8\x39\x7e\x7d\x59\xb8\xa5\xb1\x97\x0a"
      "\xed\x2b\x6b\xb5\xea\x19\x33\xc7\x2c\x35\x1f\x6b\xa9\x6c\x0b\x0b"
      "\x98\x18\x8f\x6e\x37\x3f\x5d\xb6\xc5\xeb\xec\xe9\x11\xec\x7a\x18"
      "\x48\xab\xd3\xae\x33\x55\x15\xc7\x74\xe0\x02\x7d\xab\x7d\x1c\x07"
      "\xd0\x47\xd3\xb8\x82\x5f\xf9\x42\x22\xdb\xaf\x6f\x9a\xb5\x97\xee"
      "\x82\xd8\x3b\x2f\x7d\xa2\x18\xd1\xd1\x44\x1a\x5b\x37\xbc\xb0\x65",
      128 },
    { "\x9a\x43\x3c\x61\x2d\x7e\x1b\xdf\xf8\x81\xe4\xd6\x3b\xa8\xb1\x41",
      "\x8b\x67\x0c\xf3\x1f\x47\x0f\x79\xa6\xc0\xb7\x9e\x73\x86\x3c\xa1",
      "\xce\x10\x75\x83\x32\xf4\x23\x22\x8b\x5e\x4a\xe3\x1e\xfd\xa7\x67"
      "\x75\x86\x93\x4a\x1d\x8f\x05\xd9\xb7\xa0\xdc\x4e\x20\x10\xec\x3e"
      "\xaa\xcb\x71\xa5\x27\xa5\xff\xf8\xe7\x87\xd7\x5e\xbd\x24\xad\x16"
      "\x33\x94\xc8\x91\xb3\x34\x77\xed\x9e\x2a\x2d\x85\x3c\x36\x4c\xb1"
      "\xc5\xd0\xbc\x31\x7f\xca\xf4\x01\x08\x17\xdb\xe5\xf1\xfd\x10\x37"
      "\xc7\x01\xb2\x91\xb3\xa6\x6b\x16\x4b\xc8\x18\xbf\x5c\x00\xa4\xc2"
      "\x10\xa1\x67\x1f\xaa\x57\x4d\x74\xc7\xf3\x54\x3f\x6c\x09\xaa\xf1"
      "\x17\xe1\x2e\x2e\xb3\xda\xe5\x5e\xdb\x1c\xc5\xb4\x08\x6b\x61\x7d"
      "\x85\x26\xfd\x25\xda\xf8\x90\xe7\x99\x46\xa2\x05\xb6\x98\xf2\x87",
      128 },
    { 0, 0, 0, 0 }
  };

  decryptor *c;
  uint8_t obuf[128];
  int i, rv;

  for (i = 0; testvecs[i].key; i++) {
    c = decryptor::create((const uint8_t *)testvecs[i].key, 16);
    tt_int_op(c, !=, 0);

    rv = c->decrypt(obuf,
                    (const uint8_t *)testvecs[i].ct, testvecs[i].len + 16,
                    (const uint8_t *)testvecs[i].iv, 16);
    delete c;
    tt_int_op(rv, ==, -1);
  }

 end:;
}

/* HKDF-SHA256 test vectors from http://tools.ietf.org/html/rfc5869 */
static void
test_crypt_hkdf(void *)
{
  struct testvec
  {
    const char *key;
    size_t klen;
    const char *salt;
    size_t slen;
    const char *info;
    size_t ilen;
    const char *okm;
    size_t olen;
  };
#define TV(k, s, i, o) { k, sizeof(k) - 1,      \
                         s, sizeof(s) - 1,      \
                         i, sizeof(i) - 1,      \
                         o, sizeof(o) - 1 }
  const struct testvec testvecs[] = {
    TV("\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
       "\x0b\x0b\x0b\x0b\x0b\x0b",
       "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c",
       "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9",
       "\x3c\xb2\x5f\x25\xfa\xac\xd5\x7a\x90\x43\x4f\x64\xd0\x36\x2f\x2a"
       "\x2d\x2d\x0a\x90\xcf\x1a\x5a\x4c\x5d\xb0\x2d\x56\xec\xc4\xc5\xbf"
       "\x34\x00\x72\x08\xd5\xb8\x87\x18\x58\x65"),
    TV("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
       "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
       "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
       "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
       "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f",
       "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
       "\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
       "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
       "\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
       "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf",
       "\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
       "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
       "\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
       "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
       "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
       "\xb1\x1e\x39\x8d\xc8\x03\x27\xa1\xc8\xe7\xf7\x8c\x59\x6a\x49\x34"
       "\x4f\x01\x2e\xda\x2d\x4e\xfa\xd8\xa0\x50\xcc\x4c\x19\xaf\xa9\x7c"
       "\x59\x04\x5a\x99\xca\xc7\x82\x72\x71\xcb\x41\xc6\x5e\x59\x0e\x09"
       "\xda\x32\x75\x60\x0c\x2f\x09\xb8\x36\x77\x93\xa9\xac\xa3\xdb\x71"
       "\xcc\x30\xc5\x81\x79\xec\x3e\x87\xc1\x4c\x01\xd5\xc1\xf3\x43\x4f"
       "\x1d\x87"),
    TV("\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
       "\x0b\x0b\x0b\x0b\x0b\x0b",
       "",
       "",
       "\x8d\xa4\xe7\x75\xa5\x63\xc1\x8f\x71\x5f\x80\x2a\x06\x3c\x5a\x31"
       "\xb8\xa1\x1f\x5c\x5e\xe1\x87\x9e\xc3\x45\x4e\x5f\x3c\x73\x8d\x2d"
       "\x9d\x20\x13\x95\xfa\xa4\xb6\x1a\x96\xc8"),
    { 0, 0, 0, 0, 0, 0, 0, 0 }
  };
#undef TV

  key_generator *c;
  uint8_t obuf[144];
  int i;
  size_t n;

  for (i = 0; testvecs[i].key; i++) {
    c = key_generator::from_random_secret((const uint8_t *)testvecs[i].key,
                                          testvecs[i].klen,
                                          (const uint8_t *)testvecs[i].salt,
                                          testvecs[i].slen,
                                          (const uint8_t *)testvecs[i].info,
                                          testvecs[i].ilen);
    tt_int_op(c, !=, 0);

    n = c->generate(obuf, testvecs[i].olen);
    tt_int_op(n, ==, testvecs[i].olen);
    tt_mem_op(obuf, ==, testvecs[i].okm, testvecs[i].olen);
    delete c;
  }
  c = 0;

  // Read the key material in small, odd-sized chunks to test the
  // "leftover" logic.
  for (i = 0; testvecs[i].key; i++) {
    c = key_generator::from_random_secret((const uint8_t *)testvecs[i].key,
                                          testvecs[i].klen,
                                          (const uint8_t *)testvecs[i].salt,
                                          testvecs[i].slen,
                                          (const uint8_t *)testvecs[i].info,
                                          testvecs[i].ilen);
    tt_int_op(c, !=, 0);

    for (size_t j = 0; j < testvecs[i].olen; j += n) {
      n = c->generate(obuf+j, 3);
      tt_int_op(n, ==, 3);
    }
    tt_mem_op(obuf, ==, testvecs[i].okm, testvecs[i].olen);
    delete c;
  }
  c = 0;

  // Test the upper limit on the amount of key material that can be
  // generated (255 * 32 = 8160 bytes), and also reading key material
  // in large chunks.
  c = key_generator::from_random_secret((const uint8_t *)testvecs[0].key,
                                        testvecs[0].klen,
                                        (const uint8_t *)testvecs[0].salt,
                                        testvecs[0].slen,
                                        (const uint8_t *)testvecs[0].info,
                                        testvecs[0].ilen);
  tt_int_op(c, !=, 0);
  for (i = 0; i < 56; i++) {
    n = c->generate(obuf, 144);
    tt_int_op(n, ==, 144);
  }
  // on the fifty-seventh iteration we should get a short read
  n = c->generate(obuf, 144);
  tt_int_op(n, ==, 96);

  // on the fifty-eighth iteration we should get nothing
  n = c->generate(obuf, 144);
  tt_int_op(n, ==, 0);

 end:
  if (c)
    delete c;
}

static void
test_crypt_rng(void *)
{
  /* Not really easy to unit test libcrypto's RNG, me thinks.
     An entropy test wouldn't really help either.
     I guess I'll just copy Tor's unit test methodology here :3 */

  uint8_t data1[100],data2[100];

  tt_int_op(0, ==, rng_bytes(data1, 100));
  tt_int_op(0, ==, rng_bytes(data2, 100));

  tt_mem_op(data1, !=, data2, 100);

 end:;
}


#define T(name) \
  { #name, test_crypt_##name, 0, 0, 0 }

struct testcase_t crypt_tests[] = {
  T(aesgcm_enc),
  T(aesgcm_good_dec),
  T(aesgcm_bad_dec),
  T(hkdf),
  T(rng),
  END_OF_TESTCASES
};
